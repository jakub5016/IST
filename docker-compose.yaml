services:
  kong:
    image: kong/kong-gateway:3.8.0.0
    container_name: kong
    restart: unless-stopped
    ports:
      - "8000:8000"    # Proxy
      - "8443:8443"    # Proxy (SSL)
      - "8001:8001"    # Admin
      - "8002:8002"    # GUI
      - "8444:8444"    # Admin (SSL)
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    networks:
      - iot
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    ports:
      - "8500:8500"
    command: agent -dev -client=0.0.0.0
    networks:
      - iot
  kafka:
    container_name: kafka
    image: apache/kafka:latest
    ports:
      - "9092:9092"
    environment: 
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_PROCESS_ROLES=broker,controller 
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,CONTROLLER://kafka:29093,EXTERNAL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092,CONTROLLER://kafka:29093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT, EXTERNAL:PLAINTEXT 
      - KAFKA_BROKER_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:29093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_NODE_ID=1
      - KAFKA_NUM_PARTITIONS=1
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL  
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - iot
  mongodb:
    image: mongo:4.4
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - iot
  auth-db:
    image: postgres:16-alpine
    container_name: auth-db    
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data
    networks:
      - iot
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "auth_user", "-d", "auth_db"]
      interval: 30s
      timeout: 10s
      retries: 3
  auth-service:
    build: ./auth/
    container_name: auth
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BROKER=kafka:29092
      - JWT_SECRET="TOO MANY SECRETS"
      - USER_REGISTER_TOPC=${REGISTER_RESPONSE_TOPIC}
      - PATIENT_REGISTERED_TOPIC=${PATIENT_REGISTERED_TOPIC}
      - EMPLOYEE_HIRED_TOPIC=${EMPLOYEE_HIRED_TOPIC}
    depends_on:
      - auth-db
    networks:
      - iot
  payment-gateway:
    build: ./payment_gateway/
    container_name: payu
    environment:
      - KAFKA_BROKER=kafka:29092
      - client_id=${PAYU_CLIENT_ID}
      - client_secret=${PAYU_CLIENT_SECRET}
      - PAYMENT_CREATED_TOPIC=${PAYMENT_CREATED_TOPIC}
      - REFUND_REQUESTED_TOPIC=${REFUND_REQUESTED_TOPIC}
      - REFUND_ERROR_TOPIC=${REFUND_ERROR_TOPIC}
    depends_on:
      - kafka
    networks:
      - iot
  payment-service:
    build: ./payment_service
    container_name: payment_service
    ports:
      - "8088:8088"
    depends_on:
      - mongodb
      - kafka
    environment:
      - MONGO_URI=mongodb://mongodb:27017
      - KAFKA_BROKER=kafka:29092
      - PAYMENT_CREATED_TOPIC=${PAYMENT_CREATED_TOPIC}
      - REFUND_ERROR_TOPIC=${REFUND_ERROR_TOPIC}
    networks:
      - iot
  email-service:
    build: ./email_service/EmailService/
    container_name: email_service
    ports:
      - "6764:8080"
    environment:
      - Kafka__ServerAddress=kafka:29092
      - Kafka__UserRegistredTopic=${REGISTER_RESPONSE_TOPIC}
      - SMTP__ServerAddress=smtp.gmail.com
      - SMTP__Email=${SMTP_EMAIL}
      - SMTP__From=AngioCard
      - SMTP__Password=${SMTP_PASSWORD}
      - SMTP__PORT=587
    volumes:
      - ./email_service/EmailService/Templates:/app/Templates
    depends_on:
      - kafka
    networks:
      - iot     
  patient-db:
    image: postgres:16-alpine
    container_name: patient-db
    restart: always
    ports:
      - "5434:5434"
    environment:
      POSTGRES_DB: patientdb
      POSTGRES_USER: patient_user
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres_data_patient:/var/lib/postgresql/data
    networks:
      - iot
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "patient_user", "-d", "patientdb"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: -p 5434

  patient-register-service:
    build: ./patient_register_service/PatientRegisterService/
    container_name: patient_register_service
    ports:
      - "9606:8080"
    environment:
      - Kafka__ServerAddress=kafka:29092
      - Kafka__PatientRegisterTopic=${PATIENT_REGISTER_TOPIC}
    depends_on:
      - kafka
    networks:
      - iot     
  patient-service:
    build: ./patient_service/PatientService/
    container_name: patient
    ports:
      - "9696:8080"
    environment:
      - Kafka__ServerAddress=kafka:29092
      - Kafka__UserCreationFailedTopic=${USER_CREATION_FAILED_TOPIC}
      - Kafka__PatientRegisterTopic=${PATIENT_REGISTER_TOPIC}
      - Kafka__PatientRegisteredTopic=${PATIENT_REGISTERED_TOPIC}
      - ConnectionStrings__DataConnection=Host=patient-db;Port=5434;Username=patient_user;Password=secret;Database=patientdb
    depends_on:
      - kafka
      - patient-db
    networks:
      - iot
  employee-service:
    build: ./employee_service/EmployeeService/
    container_name: employee
    ports:
      - "9666:8080"
    environment:
      - Kafka__ServerAddress=kafka:29092
      - Kafka__EmployeeHiredTopic=${EMPLOYEE_HIRED_TOPIC}
      - Kafka__EmployeeRegistrationFailedTopic=${EMPLOYEE_REGISTRATION_FAILED_TOPIC}
      - ConnectionStrings__DataConnection=Host=patient-db;Port=5434;Username=patient_user;Password=secret;Database=patientdb
    depends_on:
      - kafka
      - patient-db
    networks:
      - iot
networks:
  iot:
    driver: bridge

volumes:
  postgres_data_auth:
  postgres_data_patient:
  mongo_data: